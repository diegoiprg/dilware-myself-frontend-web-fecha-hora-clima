'use server';
/**
 * @fileOverview A weather flow that fetches data from public APIs.
 *
 * - getWeatherFlow - A function that fetches weather and location data.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { WeatherInputSchema, WeatherSchema } from '@/ai/schemas/weather-schemas';


async function makeRequest(url: string): Promise<any> {
    const response = await fetch(url, {
        headers: { 'User-Agent': 'Firebase-Studio-Agent/1.0' }
    });
    if (!response.ok) {
        throw new Error(`Network response was not ok. Status: ${response.status}`);
    }
    return response.json();
}

const getWeather = ai.defineFlow(
    {
        name: 'getWeather',
        inputSchema: WeatherInputSchema,
        outputSchema: WeatherSchema.nullable(),
    },
    async (input) => {
        let { lat, lon } = input;
        
        try {
             // If lat/lon are not provided, get them from IP
            if (lat === undefined || lon === undefined) {
                const ipData = await makeRequest('https://ipapi.co/json/');
                if (ipData.latitude && ipData.longitude) {
                    lat = ipData.latitude;
                    lon = ipData.longitude;
                } else {
                    throw new Error('Could not determine location from IP.');
                }
            }

            // Fetch weather and location name in parallel
            const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,relative_humidity_2m,uv_index,weather_code&daily=temperature_2m_max,temperature_2m_min&timezone=auto`;
            const geocodeUrl = `https://geocoding-api.open-meteo.com/v1/reverse?latitude=${lat}&longitude=${lon}`;

            const [weatherData, geocodeData] = await Promise.all([
                makeRequest(weatherUrl),
                makeRequest(geocodeUrl)
            ]);

            // Process weather data
            if (!weatherData || !weatherData.current || !weatherData.daily) {
                throw new Error('Invalid weather data received.');
            }
             const weatherResult = {
                temperature: `${Math.round(weatherData.current.temperature_2m)}째C`,
                minTemperature: `${Math.round(weatherData.daily.temperature_2m_min[0])}째`,
                maxTemperature: `${Math.round(weatherData.daily.temperature_2m_max[0])}째`,
                humidity: `${weatherData.current.relative_humidity_2m}%`,
                uvIndex: `${Math.round(weatherData.current.uv_index)}`,
                weatherCode: weatherData.current.weather_code,
            };

            // Process location data
            let location = 'Ubicaci처n desconocida';
            if (geocodeData && geocodeData.results && geocodeData.results[0]) {
                const result = geocodeData.results[0];
                const locationParts = [result.admin3, result.admin2, result.country].filter(Boolean);
                if (locationParts.length > 0) {
                    location = locationParts.join(', ');
                }
            }

            return {
                ...weatherResult,
                location,
            };

        } catch (error) {
            console.error('Error in getWeather flow:', error);
            // In case of any error in the flow, return null
            return null;
        }
    }
);

export async function getWeatherFlow(input: z.infer<typeof WeatherInputSchema>) {
    return await getWeather(input);
}
